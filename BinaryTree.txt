
1.Depth first values:

class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}

const depthFirstValues=(root)=>{
if(root===null)return [];
const result=[];
let stack=[root];
while(stack.length>0){
let current=stack.pop();
result.push(current.val);
if(current.rigth){stack.push(current.rigth);}
if(current.left){stack.push(current.left);}
}
return result;
}

const a=new Node('a');
const b=new Node('b');
const c=new Node('c');
const d=new Node('d');
const e=new Node('e');
const f=new Node('f');

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;

console.log(depthFirstValues(a));

    a
   / \
  b   c
 /\    \
d  e    f

//////////
Recursive Way:

const depthFirstValues=(root)=>{
if(root===null)return [];
const leftVal=depthFirstValues(root.left);//[b,d,e]
const rigthVal=depthFirstValues(root.rigth);//[c,f]
return [root.val, ...leftVal, ...rigthVal]; // spread operator used

}


2.Breadth First Values:
//Always try iterative method for breadth first traversal.
class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}

const breadthFirstValues=(root)=>{
if(root===null)return [];
const values=[];
const queue=[root];
while(queue.length>0){
const current=queue.shift();
values.push(current.val);

if(current.left!==null){queue.push(current.left)}
if(current.rigth!==null){queue.push(current.rigth)}
}
return values;
}

const a=new Node('a');
const b=new Node('b');
const c=new Node('c');
const d=new Node('d');
const e=new Node('e');
const f=new Node('f');

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;

console.log(breadthFirstValues(a));


3. Finding Value in binary tree:

class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}

const breadthFirstVal=(root,target)=>{
if(root===null){return false;}

const queue=[root];

while(queue.length>0){
const current=queue.shift();
if(current.val===target)return true;

if(current.left!==null){queue.push(current.left)}
if(current.rigth!==null){queue.push(current.rigth)}
}
return false;
}

const a=new Node('a');
const b=new Node('b');
const c=new Node('c');
const d=new Node('d');
const e=new Node('e');
const f=new Node('f');

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;

console.log(breadthFirstVal(a,'e'));

..........
Revcursive depth first solution:

class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}

const treeIncludes=(root,target)=>{
if(root===null)return false;
if(root.val===target)return true;
return treeIncludes(root.left,target) || treeIncludes(root.rigth,target);
}

const a=new Node('a');
const b=new Node('b');
const c=new Node('c');
const d=new Node('d');
const e=new Node('e');
const f=new Node('f');

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;

console.log(treeIncludes(a,'e'));


4.Tree Sum:

class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}
const treeSum=(root)=>{
if(root===null) return 0;
return root.val + treeSum(root.left) + treeSum(root.rigth);
}


const a=new Node(1);
const b=new Node(2);
const c=new Node(3);
const d=new Node(4);
const e=new Node(5);
const f=new Node(6);

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;


console.log(treeSum(a));

5.Minimum in tree:

//Iterative method-

class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}
//using dfs
const minInTree=(root)=>{
let smallest=Infinity;
const stack=[root];
while(stack.length>0){
const current=stack.pop();
if(current.val<smallest)smallest=current.val;
if(current.rigth)stack.push(current.rigth);
if(current.left)stack.push(current.left);
}
return smallest;
}


const a=new Node(1);
const b=new Node(2);
const c=new Node(3);
const d=new Node(4);
const e=new Node(5);
const f=new Node(-1);

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;


console.log(minInTree(a));

//Recursive Method:

class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}
const minInTree=(root)=>{
if(root===null)return Infinity;
return Math.min(minInTree(root.left), minInTree(root.rigth), root.val);

}


const a=new Node(1);
const b=new Node(2);
const c=new Node(3);
const d=new Node(-3);
const e=new Node(5);
const f=new Node(-1);

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;


console.log(minInTree(a));
-----------------------------------------------------------------------------------------
6.Max root to leaf path sum problem:

class Node{
constructor(val){
this.val=val;
this.left=null;
this.rigth=null;
}
}
const maxLength=(root)=>{
if(root===null)return -Infinity;
if(root.left===null && root.rigth===null)return root.val;
return root.val+Math.max(maxLength(root.left),maxLength(root.rigth));

}


const a=new Node(5);
const b=new Node(11);
const c=new Node(3);
const d=new Node(4);
const e=new Node(2);
const f=new Node(1);

a.left=b;
a.rigth=c;
b.left=d;
b.rigth=e;
c.rigth=f;


console.log(maxLength(a));

-----------------------------------------------------------------------------------------
